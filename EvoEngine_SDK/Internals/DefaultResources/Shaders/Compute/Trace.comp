#extension GL_ARB_shading_language_include : enable

#define TRACE_DATA_SET 0
#define SCENE_GRAPH_DATA_BINDING 0
#define SCENE_GEOMETRY_DATA_BINDING 1
#define SCENE_INFO_BLOCK_BINDING 2
#include "Trace.glsl"

layout(set = TRACE_DATA_SET, binding = 3) readonly buffer RAYS_BLOCK{
	vec4 rays[];
};

layout(set = TRACE_DATA_SET, binding = 4) writeonly buffer RAY_CASTING_RESULTS_BLOCK{
	vec4 ray_casting_results[];
};

layout(push_constant) uniform RAY_CASTING_CONSTANTS{
	vec4 ray_cast_config;
};

void Execute(uint current_ray_index);

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
	uint current_ray_index = gl_GlobalInvocationID.x;
	Execute(current_ray_index);
}

void Execute(uint current_ray_index) {
	uint rays_count = floatBitsToUint(ray_cast_config.z);
	if (current_ray_index < rays_count) {
		vec3 sample_origin = rays[current_ray_index * 2].xyz;
		vec3 sample_direction = rays[current_ray_index * 2 + 1].xyz;
		RayDescriptor ray_descriptor;
		ray_descriptor.origin = sample_origin;
		ray_descriptor.direction = sample_direction;
		ray_descriptor.t_min = rays[current_ray_index * 2].w;
		ray_descriptor.t_max = rays[current_ray_index * 2 + 1].w;
		bool hit = false;
		HitInfo hit_info = Trace(ray_descriptor, ray_cast_config.x != 0.0, ray_cast_config.y != 0.0, hit);
		if (hit) {
			ray_casting_results[current_ray_index * 4] = vec4(hit_info.hit, 1);
			ray_casting_results[current_ray_index * 4 + 1] = vec4(hit_info.barycentric, hit_info.back_face ? 1.0 : 0.0);
			ray_casting_results[current_ray_index * 4 + 2] = vec4(hit_info.normal, hit_info.hit_dist);
			ray_casting_results[current_ray_index * 4 + 3] = vec4(uintBitsToFloat(hit_info.instance_index), uintBitsToFloat(hit_info.node_index), uintBitsToFloat(hit_info.mesh_index), uintBitsToFloat(hit_info.local_triangle_index));
		}else {
			ray_casting_results[current_ray_index * 4] = vec4(0, 0, 0, 0);
			ray_casting_results[current_ray_index * 4 + 1] = vec4(0, 0, 0, 0);
			ray_casting_results[current_ray_index * 4 + 2] = vec4(0, 0, 0, 0);
			ray_casting_results[current_ray_index * 4 + 3] = vec4(0, 0, 0, 0);
		}
	}
}