#extension GL_ARB_shading_language_include : enable
#extension GL_EXT_mesh_shader : enable
#extension GL_ARB_shader_draw_parameters : enable
#extension GL_EXT_control_flow_attributes : require
#extension GL_ARB_shading_language_include : enable

#include "BasicConstants.glsl"
#include "Basic.glsl"

const uint WORKGROUP_SIZE = EXT_MESH_SUBGROUP_COUNT * EXT_MESH_SUBGROUP_SIZE;

layout(local_size_x = WORKGROUP_SIZE) in;
layout(triangles) out;
layout(max_vertices = MESHLET_MAX_VERTICES_SIZE, max_primitives = MESHLET_MAX_TRIANGLES_SIZE) out;

const uint MESHLET_VERTEX_ITERATIONS    = ((MESHLET_MAX_VERTICES_SIZE	+ WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);
const uint MESHLET_PRIMITIVE_ITERATIONS = ((MESHLET_MAX_TRIANGLES_SIZE	+ WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

struct Task{
	uint	instanceIndex;
	uint	baseID;
	uint8_t	deltaIDs[EXT_INVOCATIONS_PER_TASK];
};

taskPayloadSharedEXT Task ts_in;
// gl_WorkGroupID.x runs from [0 .. parentTask.groupCountX - 1]
uint meshletID = ts_in.baseID + ts_in.deltaIDs[gl_WorkGroupID.x];
uint laneID = gl_LocalInvocationID.x;

void main()
{
	uint instanceIndex = ts_in.instanceIndex;
	
	mat4 model = EE_INSTANCES[instanceIndex].model;

	Meshlet meshlet = EE_MESHLETS[meshletID];

	uint verticesSize = meshlet.verticesSize;
	uint triangleSize = meshlet.triangleSize;
	SetMeshOutputsEXT(verticesSize, triangleSize);
	mat4 projectionView = EE_SPOT_LIGHTS[EE_CAMERA_INDEX].light_space_matrix * model;
	[[unroll]]
	for (uint i = 0; i < uint(MESHLET_VERTEX_ITERATIONS); ++i)
	{
		uint vert = laneID + i * WORKGROUP_SIZE;

		if (vert >= verticesSize) break;

		Vertex v = EE_VERTEX_DATA_CHUNKS[meshletID].vertices[vert];
		gl_MeshVerticesEXT[vert].gl_Position = projectionView * vec4(v.position.xyz, 1.0);
	}
	[[unroll]]
	for (uint i = 0; i < uint(MESHLET_PRIMITIVE_ITERATIONS); ++i)
	{
		uint prim = laneID + i * WORKGROUP_SIZE;
		if(prim <= triangleSize){
			gl_PrimitiveTriangleIndicesEXT[prim] = 
				uvec3(
					meshlet.indices[prim * 3],
					meshlet.indices[prim * 3 + 1],
					meshlet.indices[prim * 3 + 2]);
		}
	}
}