#extension GL_EXT_mesh_shader : enable
#extension GL_ARB_shader_draw_parameters : enable
#extension GL_EXT_control_flow_attributes : require
#extension GL_ARB_shading_language_include : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require

#include "Math.glsl"

#include "PerFrame.glsl"

#define DYNAMIC_STRANDS_SET 1
#include "DynamicStrands.glsl"

const uint WORKGROUP_SIZE = EXT_MESH_SUBGROUP_COUNT * EXT_MESH_SUBGROUP_SIZE;

layout(local_size_x = WORKGROUP_SIZE) in;
layout(triangles) out;

#define SEGMENT_VERTICES_SIZE 8
#define SEGMENT_TRIANGLE_SIZE 12

layout(max_vertices = SEGMENT_VERTICES_SIZE, max_primitives = SEGMENT_TRIANGLE_SIZE) out;

const uint SEGMENT_VERTEX_ITERATIONS    = ((SEGMENT_VERTICES_SIZE	+ WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);
const uint SEGMENT_PRIMITIVE_ITERATIONS = ((SEGMENT_TRIANGLE_SIZE	+ WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

layout(location = 0) out MS_V_OUT {
	vec3 frag_pos;
	vec3 normal;
	vec3 tangent;
	vec4 color;
} ms_v_out[];

struct Task{
	uint	baseID;
	uint8_t	deltaIDs[EXT_INVOCATIONS_PER_TASK];
};

vec3 positions[] = {
    vec3(-0.5, -0.5, -0.5),
    vec3(0.5, 0.5, -0.5),
	vec3(0.5, -0.5, -0.5),
	vec3(-0.5, 0.5, -0.5),

	vec3(-0.5, -0.5, 0.5),
	vec3(0.5, -0.5, 0.5),
	vec3(0.5, 0.5, 0.5),
	vec3(-0.5, 0.5, 0.5)
};

uvec3 triangles[] = {
	uvec3(0, 1, 2),
	uvec3(1, 0, 3),
	uvec3(4, 5, 6),

	uvec3(6, 7, 4),
	uvec3(7, 3, 0),
	uvec3(0, 4, 7),

	uvec3(6, 2, 1),
	uvec3(2, 6, 5),
	uvec3(0, 2, 5),

	uvec3(5, 4, 0),
	uvec3(3, 6, 1),
	uvec3(6, 3, 7)
};

layout(push_constant) uniform STRANDS_RENDER_CONSTANTS {
  uint camera_index;
  uint strands_size;
  uint segments_size;
};

taskPayloadSharedEXT Task ts_in;

// gl_WorkGroupID.x runs from [0 .. parentTask.groupCountX - 1]
uint segment_id = ts_in.baseID + ts_in.deltaIDs[gl_WorkGroupID.x];
uint laneID = gl_LocalInvocationID.x;


void main(){
	if(segment_id >= segments_size) return;

	SetMeshOutputsEXT(SEGMENT_VERTICES_SIZE, SEGMENT_TRIANGLE_SIZE);
	
	Segment segment = segments[segment_id];

	Particle particle0 = particles[floatBitsToInt(segment.inertia_tensor_particle_0_handle.w)];
	Particle particle1 = particles[floatBitsToInt(segment.inv_inertia_tensor_particle_1_handle.w)];

	vec3 start_position = particle0.x.xyz;
	vec3 end_position = particle1.x.xyz;

	vec3 center_position = (start_position + end_position) * 0.5;
	float center_thickness = segment.radius * 2.0;
	
	//vec4 rotation = segment.q;

	vec3 front = normalize(end_position - start_position);
	vec4 rotation = quatLookAt(front, vec3(front.y, front.z, front.x));

	mat4 instance_matrix = translate(center_position) * mat4_cast(rotation) * scale(vec3(center_thickness, center_thickness, distance(start_position, end_position)));
	
	mat4 transform = EE_CAMERAS[camera_index].projection_view * instance_matrix;
	
	[[unroll]]
	for (uint i = 0; i < uint(SEGMENT_VERTEX_ITERATIONS); ++i)
	{
		uint vertex_index = laneID + i * WORKGROUP_SIZE;
		if (vertex_index > SEGMENT_VERTICES_SIZE) break;
		vec3 vertex_position = positions[vertex_index];

		ms_v_out[vertex_index].frag_pos = vec4(instance_matrix * vec4(vertex_position, 1.0)).xyz;
		ms_v_out[vertex_index].normal = vec3(0, 1, 0);
		ms_v_out[vertex_index].tangent = vec3(0, 0, 1);
		ms_v_out[vertex_index].color = segment.color;
		gl_MeshVerticesEXT[vertex_index].gl_Position = transform * vec4(vertex_position, 1.0);
	}

	[[unroll]]
	for (uint i = 0; i < uint(SEGMENT_PRIMITIVE_ITERATIONS); ++i)
	{
		uint triangle_index = laneID + i * WORKGROUP_SIZE;
		if(triangle_index <= SEGMENT_TRIANGLE_SIZE){
			gl_PrimitiveTriangleIndicesEXT[triangle_index] = triangles[triangle_index];
		}
	}
}