#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_ARB_shading_language_include : enable

#define DYNAMIC_STRANDS_SET 0
#include "DynamicStrands.glsl"
#include "Math.glsl"

const uint WORKGROUP_SIZE = EXT_TASK_SUBGROUP_COUNT * EXT_TASK_SUBGROUP_SIZE;

const uint ITERATIONS_PER_TASK = ((EXT_INVOCATIONS_PER_TASK + WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

uint baseID = gl_WorkGroupID.x * EXT_INVOCATIONS_PER_TASK;
uint laneID = gl_LocalInvocationID.x;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define BARRIER() \
memoryBarrierShared(); \
barrier();

layout(push_constant) uniform PUSH_CONSTANTS {
	uint particle_size;
	float time_step;
	float inv_time_step;
};

void main(){
	for (uint i = 0; i < ITERATIONS_PER_TASK; i++)
	{
		uint local_index  = laneID + i * WORKGROUP_SIZE;
		uint particle_index = baseID + local_index;

		if(particle_index >= particle_size) break;

		Particle particle = particles[particle_index];
		
		//Calculate velocity and apply acceleration.
		vec3 velocity = vec3(0, 0, 0);
		if(particle.acceleration_inv_mass.w != 0.0){
			velocity = inv_time_step * (1.5 * particle.x.xyz - 2.0 * particle.old_x.xyz + 0.5 * particle.last_x.xyz);
			velocity += particle.acceleration_inv_mass.xyz * time_step;
		}
		velocity *= 1.0 - particle.x0_damping.w;
		//Shift position values
		particle.last_x.xyz = particle.old_x.xyz;
		particle.old_x.xyz = particle.x.xyz;
		//Apply velocity
		particle.x.xyz += time_step * velocity;

		particles[particle_index] = particle;
	}
}