
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_ARB_shading_language_include : enable
#extension GL_EXT_control_flow_attributes : require
#define DYNAMIC_STRANDS_SET 0
#include "DynamicStrands.glsl"

const uint WORKGROUP_SIZE = EXT_TASK_SUBGROUP_COUNT * EXT_TASK_SUBGROUP_SIZE;

const uint ITERATIONS_PER_TASK = ((EXT_INVOCATIONS_PER_TASK + WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

uint baseID = gl_WorkGroupID.x * EXT_INVOCATIONS_PER_TASK;
uint laneID = gl_LocalInvocationID.x;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define BARRIER() \
memoryBarrierShared(); \
barrier();

layout(push_constant) uniform PUSH_CONSTANTS {
	uint strand_size;
};

#define DYNAMIC_STRANDS_PHYSICS_SET 1
#include "DynamicStrandsPhysics.glsl"

void project_constraint(in int segment_handle);

void main(){

	[[unroll]]
	for (uint i = 0; i < ITERATIONS_PER_TASK; i++)
	{
		uint local_index  = laneID + i * WORKGROUP_SIZE;
		uint strand_index = baseID + local_index;

		if(strand_index >= strand_size) break;

		PerStrandData strand_data = per_strand_data_list[strand_index];
		int front_propagate_handle = strand_data.front_propagate_begin_segment_handle;
		int back_propagate_handle = -1;//strand_data.back_propagate_begin_segment_handle;
		while(front_propagate_handle != -1 || back_propagate_handle != -1){
			if(front_propagate_handle != -1) {
				project_constraint(front_propagate_handle);
				front_propagate_handle = segments[front_propagate_handle].next_handle;
				//if(front_propagate_handle != -1) front_propagate_handle = segments[front_propagate_handle].next_handle;
			}
			//if(back_propagate_handle != -1) {
			//	project_constraint(back_propagate_handle);
			//	back_propagate_handle = segments[back_propagate_handle].prev_handle;
			//	if(back_propagate_handle != -1) back_propagate_handle = segments[back_propagate_handle].prev_handle;
			//}
		}
	}
}

void project_constraint(in int segment_handle){
	Segment segment = segments[segment_handle];
	int particle0_handle = floatBitsToInt(segment.inertia_tensor_particle_0_handle.w);
	int particle1_handle = floatBitsToInt(segment.inv_inertia_tensor_particle_1_handle.w);
	Particle particle0 = particles[particle0_handle];
	Particle particle1 = particles[particle1_handle];
	
	vec3 x0_correction, x1_correction;
	vec4 q_correction;

	vec3 p0 = particle0.x.xyz;
	vec3 p1 = particle1.x.xyz;

	float inv_mass_p0 = particle0.acceleration_inv_mass.w;
	float inv_mass_p1 = particle1.acceleration_inv_mass.w;
	vec4 q = segment.q;
	float inv_mass_q = segment.inv_mass;
	vec3 stretching_and_shearing_k = vec3(segment.shearing_stiffness, segment.shearing_stiffness, segment.stretching_stiffness);
	float rest_length = segment.torque_rest_length.w;

	vec3 d3;
	d3[0] = -2.0 * (q.x * q.z + q.w * q.y);
	d3[1] = -2.0 * (q.y * q.z - q.w * q.x);
	d3[2] = -q.w * q.w + q.x * q.x + q.y * q.y - q.z * q.z;

	vec3 gamma = (p1 - p0) / rest_length - d3;
	gamma /= (inv_mass_p0 + inv_mass_p1) / rest_length + inv_mass_q * 4.0 * rest_length + 1e-6;

	if(abs(stretching_and_shearing_k.x - stretching_and_shearing_k.y) < 1e-6 
		&& abs(stretching_and_shearing_k.x - stretching_and_shearing_k.z) < 1e-6){
		gamma.x *= stretching_and_shearing_k.x;
		gamma.y *= stretching_and_shearing_k.y;
		gamma.z *= stretching_and_shearing_k.z;
	}else{
		mat3 r = mat3_cast(q);
		gamma = transpose(r) * gamma;
		gamma.x *= stretching_and_shearing_k.x;
		gamma.y *= stretching_and_shearing_k.y;
		gamma.z *= stretching_and_shearing_k.z;
		gamma = r * gamma;
	}
	x0_correction = inv_mass_p0 * gamma;
	x1_correction = -inv_mass_p1 * gamma;

	vec4 q_e_3_bar = vec4(q.y, -q.x, q.w, -q.z);
	q_correction = quat_mul(vec4(gamma.x, gamma.y, gamma.z, 0.0), q_e_3_bar);
	q_correction *= 2.0 * inv_mass_q * rest_length;

	particles[particle0_handle].x.xyz += x0_correction;
	particles[particle1_handle].x.xyz += x1_correction;
	segments[segment_handle].q = normalize(q_correction + segment.q);
}