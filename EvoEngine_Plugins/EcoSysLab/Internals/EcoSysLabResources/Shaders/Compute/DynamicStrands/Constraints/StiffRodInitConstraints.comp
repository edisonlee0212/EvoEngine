#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_ARB_shading_language_include : enable
#extension GL_EXT_control_flow_attributes : require

#define DYNAMIC_STRANDS_SET 0
#include "DynamicStrands.glsl"

const uint WORKGROUP_SIZE = EXT_TASK_SUBGROUP_COUNT * EXT_TASK_SUBGROUP_SIZE;

const uint ITERATIONS_PER_TASK = ((EXT_INVOCATIONS_PER_TASK + WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

uint baseID = gl_WorkGroupID.x * EXT_INVOCATIONS_PER_TASK;
uint laneID = gl_LocalInvocationID.x;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define BARRIER() \
memoryBarrierShared(); \
barrier();

layout(push_constant) uniform PUSH_CONSTANTS {
	uint constraint_size;
    float time_step;
};

#define DYNAMIC_STRANDS_PHYSICS_SET 1
#include "DynamicStrandsPhysics.glsl"

void init_stretch_bending_twisting_constraint(in vec3 stiffness_coefficient_k, in float time_step,
                                              in float average_segment_length, out vec3 stretch_compliance,
                                              out vec3 bending_and_torsion_compliance) {
  float time_step_quadratic = time_step * time_step;

  stretch_compliance = vec3(time_step_quadratic / stiffness_coefficient_k[0],
                            time_step_quadratic / stiffness_coefficient_k[0],
                            time_step_quadratic / stiffness_coefficient_k[0]);

  bending_and_torsion_compliance = vec3(time_step_quadratic / stiffness_coefficient_k[1],
                                        time_step_quadratic / stiffness_coefficient_k[1],
                                        time_step_quadratic / stiffness_coefficient_k[2]);
}

void init_constraint(in uint constraint_handle);
//Line 52
void main(){

	[[unroll]]
	for (uint i = 0; i < ITERATIONS_PER_TASK; i++)
	{
		uint local_index  = laneID + i * WORKGROUP_SIZE;
		uint constraint_index = baseID + local_index;

		if(constraint_index >= constraint_size) break;
		
	}
}