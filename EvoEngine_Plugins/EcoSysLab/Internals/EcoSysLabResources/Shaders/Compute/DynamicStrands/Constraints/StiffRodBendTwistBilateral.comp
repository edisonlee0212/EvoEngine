#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_ARB_shading_language_include : enable
#extension GL_EXT_control_flow_attributes : require

const uint WORKGROUP_SIZE = EXT_TASK_SUBGROUP_COUNT * EXT_TASK_SUBGROUP_SIZE;

const uint ITERATIONS_PER_TASK = ((EXT_INVOCATIONS_PER_TASK + WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

uint baseID = gl_WorkGroupID.x * EXT_INVOCATIONS_PER_TASK;
uint laneID = gl_LocalInvocationID.x;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define BARRIER() \
memoryBarrierShared(); \
barrier();

layout(push_constant) uniform PUSH_CONSTANTS {
	uint strand_size;
};

#define DYNAMIC_STRANDS_SET 0
#define DYNAMIC_STRANDS_PHYSICS_SET 1
#include "DynamicStrandsPhysics.glsl"


void main(){

	[[unroll]]
	for (uint i = 0; i < ITERATIONS_PER_TASK; i++)
	{
		uint local_index  = laneID + i * WORKGROUP_SIZE;
		uint strand_index = baseID + local_index;

		if(strand_index >= strand_size) break;

		PerStrandData strand_data = per_strand_data_list[strand_index];
		int front_propagate_handle = strand_data.front_propagate_begin_connection_handle;
		int back_propagate_handle = strand_data.back_propagate_begin_connection_handle;
		while(front_propagate_handle != -1 || back_propagate_handle != -1){
			if(front_propagate_handle != -1) {
				project_bend_twist_constraint(front_propagate_handle);
				front_propagate_handle = connections[front_propagate_handle].next_handle;
				if(front_propagate_handle != -1) front_propagate_handle = connections[front_propagate_handle].next_handle;
			}
			if(back_propagate_handle != -1) {
				project_bend_twist_constraint(back_propagate_handle);
				back_propagate_handle = connections[back_propagate_handle].prev_handle;
				if(back_propagate_handle != -1) back_propagate_handle = connections[back_propagate_handle].prev_handle;
			}
		}
	}
}

