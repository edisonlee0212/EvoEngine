#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_ARB_shading_language_include : enable
#extension GL_EXT_control_flow_attributes : require

#define DYNAMIC_STRANDS_SET 0
#include "DynamicStrands.glsl"
#include "Math.glsl"

const uint WORKGROUP_SIZE = EXT_TASK_SUBGROUP_COUNT * EXT_TASK_SUBGROUP_SIZE;

const uint ITERATIONS_PER_TASK = ((EXT_INVOCATIONS_PER_TASK + WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

uint baseID = gl_WorkGroupID.x * EXT_INVOCATIONS_PER_TASK;
uint laneID = gl_LocalInvocationID.x;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define BARRIER() \
memoryBarrierShared(); \
barrier();

layout(push_constant) uniform PUSH_CONSTANTS {
	uint particle_size;
};

struct Connectivity{
	vec4 new_position;
	int neighbors[8];
	float distances[8];
};

layout(std430, set = 1, binding = 0) buffer CONNECTIVITY_BLOCK {
  Connectivity connecvitity_list[];
};

void main(){

	[[unroll]]
	for (uint i = 0; i < ITERATIONS_PER_TASK; i++)
	{
		uint local_index  = laneID + i * WORKGROUP_SIZE;
		uint particle_index = baseID + local_index;

		if(particle_index >= particle_size) break;

		Particle particle = particles[particle_index];
		Connectivity connectivity = connecvitity_list[particle_index];
		vec3 movement = vec3(0.0, 0.0, 0.0);
		int sum = 0;
		[[unroll]]
		for(uint n_i = 0; n_i < 8; n_i++){
			int neighbor_particle_index = connectivity.neighbors[n_i];
			if(neighbor_particle_index == -1) continue;
			vec3 neighbor_position = particles[neighbor_particle_index].x.xyz;
			float current_distance = distance(neighbor_position, particle.x.xyz);
			vec3 direction = normalize(neighbor_position - particle.x.xyz);
			movement += direction * (current_distance - connectivity.distances[n_i]) * 0.5;
			sum += 1;
		}
		
		if(sum != 0) connecvitity_list[particle_index].new_position.xyz = particle.x.xyz + movement / sum;
		else connecvitity_list[particle_index].new_position.xyz = particle.x.xyz;
	}
}