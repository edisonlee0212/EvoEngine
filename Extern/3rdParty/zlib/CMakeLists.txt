set (TARGET_NAME zlib)

set(zlib_directory ${CMAKE_CURRENT_SOURCE_DIR}/${TARGET_NAME})


# If set this to ON, zlib will add a 1.dll suffix to the output dll. To avoid a conflict with Chromium's zlib (used
# in some UE's plugins), we have to keep this suffix.
set(BUILD_SHARED_LIBS ON)

set(SKIP_INSTALL_ALL ON CACHE BOOL "" FORCE)
set(ZLIB_BUILD_EXAMPLES OFF CACHE INTERNAL "" FORCE)

add_subdirectory(${TARGET_NAME} EXCLUDE_FROM_ALL)

# Redirect the find_packge(zlib) to this directory
set(CMAKE_DISABLE_FIND_PACKAGE_ZLIB FALSE CACHE BOOL "" FORCE)
set(ZLIB_INCLUDE_DIR
  ${zlib_directory}
  ${PROJECT_BINARY_DIR}/Extern/3rdParty/${TARGET_NAME}/${TARGET_NAME}
  CACHE INTERNAL "" FORCE
)
set(ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
set(ZLIB_LIBRARY zlib CACHE INTERNAL "" FORCE)
set(ZLIB_LIBRARIES ${ZLIB_LIBRARY} CACHE INTERNAL "" FORCE)
set(ZLIB_FOUND TRUE CACHE INTERNAL "" FORCE)

add_library(ZLIB::ZLIB ALIAS ${TARGET_NAME})

set_target_properties(${TARGET_NAME} PROPERTIES FOLDER "3rdparty")

set(3RDPARTY_INCLUDES ${3RDPARTY_INCLUDES} ${ZLIB_INCLUDE_DIR} PARENT_SCOPE)

set(3RDPARTY_DLLS ${3RDPARTY_DLLS} 
    ${CMAKE_CURRENT_BINARY_DIR}/zlib/zlib1.dll
    ${CMAKE_CURRENT_BINARY_DIR}/zlib/$<CONFIGURATION>/zlib1.dll
    ${CMAKE_CURRENT_BINARY_DIR}/zlib/zlibd1.dll
    ${CMAKE_CURRENT_BINARY_DIR}/zlib/$<CONFIGURATION>/zlibd1.dll
    PARENT_SCOPE)

set(3RDPARTY_LIBS ${3RDPARTY_LIBS} 
    ${TARGET_NAME}
    PARENT_SCOPE)

set(3RDPARTY_PDBS ${3RDPARTY_PDBS} 
    ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}/zlib.pdb
    ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}/$<CONFIGURATION>/zlib.pdb
    ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}/zlibd.pdb
    ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}/$<CONFIGURATION>/zlibd.pdb
    PARENT_SCOPE)